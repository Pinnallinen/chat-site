{"version":3,"sources":["translation/AddPost_bundle.js","components/AddPost.js","translation/RegisterUser_bundle.js","components/RegisterUser.js","translation/LogInUser_bundle.js","components/LogInUser.js","translation/DisplayPost_bundle.js","components/DisplayPost.js","App.js","serviceWorker.js","index.js"],"names":["BUNDLE","en","content","send","fi","AddPost","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","target","name","setState","value","savePost","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","loggedIn","fetch","method","headers","Content-Type","Authorization","concat","getToken","body","JSON","stringify","state","sent","status","history","replace","stop","bundle","siteLang","react_default","createElement","TextField_default","multiline","rowsMax","onChange","label","Button_default","onClick","Component","createNewUser","registerTitle","fieldsRequired","username","password","password2","email","fname","lname","age","phone","address","cancel","create","RegisterUser","handleOpen","open","handleClose","defineProperty","submitUser","_ref","e","response","pass","pass2","text","console","log","registeredUser","_x","apply","arguments","class","color","Dialog_default","onClose","DialogTitle_default","DialogContent_default","DialogContentText_default","type","DialogActions_default","login","LogInUser","expanded","handleLogin","user","ExpansionPanel_default","ExpansionPanelSummary_default","ExpansionPanelDetails_default","comment","postComment","DisplayPost","openPost","postOpen","handleComment","res","newPost","post","_id","json","answers","setPostComments","postComments","rawPostComments","map","answer","Typography_default","align","answer_owner","inline","answer_date","Card_default","CardContent_default","owner","CardActions_default","id","Fragment","App","getPosts","posts","allPosts","components_DisplayPost","setToken","token","localStorage","setItem","getItem","removeToken","removeItem","changeLang","isTokenExpired","userInfo","then","handleLogout","decodeToken","base64Url","split","base64","parse","atob","exp","Date","now","components_AddPost","components_RegisterUser","components_LogInUser","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3ffc6dd.chunk.js","sourcesContent":["const BUNDLE = {\r\n    en: {\r\n        content: \"Write something!\",\r\n        send: \"Send\",\r\n    },\r\n    fi: {\r\n        content: \"Kirjoita jotain!\",\r\n        send: \"Lähetä\",\r\n    },\r\n}\r\n\r\nexport default BUNDLE;\r\n","import React, { Component } from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// BUNDLE used for translations\r\nimport BUNDLE from \"../translation/AddPost_bundle\";\r\n\r\nclass AddPost extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var bundle = BUNDLE;\r\n        if ( props.siteLang === \"fi\" )\r\n            bundle = bundle.fi;\r\n        else {\r\n            bundle = bundle.en;\r\n        }\r\n\r\n        this.state = {\r\n            content: \"\",\r\n            bundle: bundle,\r\n        }\r\n    }\r\n\r\n    handleChange = ( event ) => {\r\n        switch ( event.target.name ) {\r\n            case \"content\":\r\n                this.setState({ content: event.target.value });\r\n        }\r\n    }\r\n\r\n    // Saving the post if the user is logged in\r\n    savePost = async () => {\r\n        if ( this.props.loggedIn() ) {\r\n            const res = await fetch(\"/api/posts\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": `Bearer ${this.props.getToken()}`\r\n                },\r\n                body: JSON.stringify({\r\n                    content: this.state.content\r\n                }),\r\n            });\r\n\r\n            // Saving the post was successful\r\n            if ( res.status === 200 ) {\r\n\r\n            }\r\n        }\r\n        else {\r\n            this.props.history.replace(\"/\");\r\n            // TODO: Error user not logged in\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <TextField\r\n                    name=\"content\"\r\n                    multiline\r\n                    rowsMax=\"5\"\r\n                    value={this.state.content}\r\n                    onChange={this.handleChange}\r\n                    label={this.state.bundle.content} />\r\n\r\n                <Button onClick={this.savePost} > {this.state.bundle.send} </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPost;\r\n","const BUNDLE = {\r\n  en: {\r\n    createNewUser: \"Create a new user\",\r\n    registerTitle: \"Registering a new user\",\r\n    fieldsRequired: \"Fields marked with * are required\",\r\n    username: \"Username *\",\r\n    password: \"Password *\",\r\n    password2: \"Password again *\",\r\n    email: \"Email *\",\r\n    fname: \"First name *\",\r\n    lname: \"Last name *\",\r\n    age: \"Age *\",\r\n    phone: \"Phone number\",\r\n    address: \"Address\",\r\n    cancel: \"Cancel\",\r\n    create: \"Register user\",\r\n  },\r\n  fi: {\r\n    createNewUser: \"Uusi käyttäjä\",\r\n    registerTitle: \"Uuden käyttäjän rekisteröinti\",\r\n    fieldsRequired: \"* Merkityt kentät ovat pakollisia\",\r\n    username: \"Käyttäjänimi *\",\r\n    password: \"Salasana *\",\r\n    password2: \"Salasana uudestaan *\",\r\n    email: \"Sähköposti *\",\r\n    fname: \"Etunimi *\",\r\n    lname: \"Sukunimi *\",\r\n    age: \"Age *\",\r\n    phone: \"Phone number\",\r\n    address: \"Address\",\r\n    cancel: \"Peruuta\",\r\n    create: \"Luo käyttäjä\",\r\n  },\r\n}\r\n\r\nexport default BUNDLE;\r\n","import React, { Component } from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport BUNDLE from \"../translation/RegisterUser_bundle\";\r\n\r\n/*\r\nA simple dialog-window-class which can be used to register new users.\r\n*/\r\nclass RegisterUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var bundle = BUNDLE;\r\n        if ( props.siteLang === \"fi\" )\r\n            bundle = bundle.fi;\r\n        else {\r\n            bundle = bundle.en;\r\n        }\r\n\r\n        this.state = {\r\n            bundle: bundle,\r\n            // Dialog status\r\n            open: false,\r\n            // The rest are user data\r\n            pass: \"\",\r\n            pass2: \"\",\r\n            username: \"\",\r\n            email: \"\",\r\n        };\r\n    };\r\n\r\n    // Opens the dialog-window\r\n    handleOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    // Closes the dialog-window\r\n    handleClose = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    // Handles all the changes in the TextFields\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    submitUser = async (e) => {\r\n        if ( this.state.pass === this.state.pass2 ) {\r\n\r\n            // Trying to save the new user\r\n            const response = await fetch('api/users/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    pass: this.state.pass,\r\n                    email: this.state.email,\r\n                    username: this.state.username,\r\n                }),\r\n            });\r\n\r\n            const body = await response.text();\r\n            console.log(body);\r\n\r\n            // If adding the new user was successful, close the dialog\r\n            if ( response.status === 201 ) {\r\n                this.handleClose();\r\n\r\n                // Telling the parent we logged in\r\n                this.props.registeredUser(response);\r\n            }\r\n        }\r\n        else {\r\n            // TODO: passwords do not match error\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        var bundle = this.state.bundle;\r\n\r\n        return (\r\n            <div class=\"float-left\">\r\n                <Button onClick={this.handleOpen} color=\"primary\">\r\n                    {bundle.createNewUser}\r\n                </Button>\r\n\r\n                <Dialog open={this.state.open} onClose={this.handleClose}>\r\n                    <DialogTitle> {bundle.registerTitle} </DialogTitle>\r\n\r\n                    <DialogContent>\r\n                        <DialogContentText> {bundle.fieldsRequired} </DialogContentText>\r\n\r\n                        <TextField name=\"username\" label={bundle.username} value={this.state.username} onChange={this.handleChange} />\r\n                        <TextField name=\"pass\" label={bundle.password} type=\"password\" value={this.state.pass} onChange={this.handleChange} />\r\n                        <TextField name=\"pass2\" label={bundle.password2} type=\"password\" value={this.state.pass2} onChange={this.handleChange} />\r\n                        <TextField name=\"email\" label={bundle.email} type=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color=\"secondary\">\r\n                            {bundle.cancel}\r\n                        </Button>\r\n                        <Button onClick={this.submitUser} color=\"primary\">\r\n                            {bundle.create}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default RegisterUser;\r\n","const BUNDLE = {\r\n    en: {\r\n        login: \"Log in\"\r\n    },\r\n    fi: {\r\n        login: \"Kirjaudu sisään\"\r\n    }\r\n}\r\n\r\nexport default BUNDLE;\r\n","import React, {  Component } from 'react';\r\n\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport BUNDLE from \"../translation/LogInUser_bundle\";\r\n\r\nclass LogInUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var bundle = BUNDLE;\r\n        if ( props.siteLang === \"fi\" )\r\n            bundle = bundle.fi;\r\n        else {\r\n            bundle = bundle.en;\r\n        }\r\n\r\n        this.state = {\r\n            expanded: false,\r\n            bundle: bundle,\r\n        };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        if ( !event.target.name ) {\r\n            this.setState({\r\n                expanded: !this.state.expanded,\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                [event.target.name]: event.target.value,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleLogin = () => {\r\n        var user = {};\r\n        user.username = this.state.username;\r\n        user.password = this.state.password;\r\n\r\n        this.props.handleLogin(user);\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div >\r\n                <ExpansionPanel expanded={this.state.expanded} onChange={this.handleChange}>\r\n                    <ExpansionPanelSummary >\r\n                        {this.state.bundle.login}\r\n                    </ExpansionPanelSummary>\r\n\r\n                    <ExpansionPanelDetails>\r\n                        <TextField\r\n                            name=\"username\"\r\n                            label={this.state.bundle.username}\r\n                            value={this.state.username}\r\n                            onChange={this.handleChange} />\r\n                        <TextField\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            label={this.state.bundle.password}\r\n                            value={this.state.password}\r\n                            onChange={this.handleChange} />\r\n\r\n                        <Button onClick={this.handleLogin} >\r\n                            {this.state.bundle.login}\r\n                        </Button>\r\n                    </ExpansionPanelDetails>\r\n                </ExpansionPanel>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default LogInUser;\r\n","const BUNDLE = {\r\n    en: {\r\n        comment: \"Say something!\",\r\n        postComment: \"Send\",\r\n    },\r\n    fi: {\r\n        comment: \"Kirjoita jotakin!\",\r\n        postComment: \"Lähetä\",\r\n    }\r\n}\r\nexport default BUNDLE;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport BUNDLE from \"../translation/DisplayPost_bundle\";\r\n\r\nclass DisplayPost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var bundle = BUNDLE;\r\n        if ( props.siteLang === \"fi\" )\r\n            bundle = bundle.fi;\r\n        else {\r\n            bundle = bundle.en;\r\n        }\r\n\r\n        this.state = {\r\n            bundle: bundle,\r\n            postOpen: false,\r\n            comment: \"\",\r\n            postComments: null,\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setPostComments(this.props.post.answers);\r\n    }\r\n\r\n    setPostComments(rawPostComments) {\r\n        var postComments = rawPostComments.map((answer) => {\r\n            console.log(answer);\r\n            return (\r\n                <div class=\"post\">\r\n                    <Typography color=\"textSecondary\" align=\"right\" >\r\n                        {answer.answer_owner}\r\n                    </Typography>\r\n\r\n                    <Typography inline={true} color=\"textSecondary\">\r\n                        {answer.answer_date}\r\n                    </Typography>\r\n\r\n\r\n                    <Typography >\r\n                        {answer.content}\r\n                    </Typography>\r\n                </div>\r\n            );\r\n        });\r\n        console.log(postComments);\r\n        this.setState({\r\n            comment: \"\",\r\n            postComments: postComments,\r\n        });\r\n    }\r\n\r\n    openPost = () => {\r\n        this.setState({\r\n            postOpen: true,\r\n        });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            postOpen: false,\r\n        });\r\n    };\r\n\r\n    handleComment = async () => {\r\n\r\n        if ( this.props.loggedIn() ) {\r\n            console.log(`/api/posts/${this.props.post._id}`);\r\n            const res = await fetch(`/api/posts/${this.props.post._id}`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": `Bearer ${this.props.getToken()}`\r\n                },\r\n                body: JSON.stringify({\r\n                    content: this.state.comment,\r\n                }),\r\n            });\r\n\r\n            // Saving the post was successful\r\n            // TODO: reload post content\r\n            if ( res.status === 200 ) {\r\n                //console.log(res);\r\n                var newPost = await res.json();\r\n                console.log(newPost.answers);\r\n\r\n                this.setPostComments(newPost.answers);\r\n            }\r\n        }\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        var post = this.props.post;\r\n        var bundle = this.state.bundle;\r\n\r\n        return (\r\n            <div>\r\n                <Card onClick={this.openPost}>\r\n                    <CardContent >\r\n                        <Typography color=\"black\"  align=\"right\">\r\n                            {post.owner}\r\n                        </Typography>\r\n\r\n                        <Typography color=\"textPrimary\" >\r\n                            {post.content}\r\n                        </Typography>\r\n                    </CardContent>\r\n\r\n                    <CardActions >\r\n\r\n                    </CardActions>\r\n                </Card>\r\n\r\n                { // If the post is open, display the post otherwise nothing\r\n                this.state.postOpen?(\r\n                    <div id=\"padding-0\">\r\n                        <Dialog open={this.state.postOpen} onClose={this.handleClose} >\r\n                            <DialogContent>\r\n                                <Typography align=\"right\" color=\"textSecondary\">\r\n                                    {post.owner}\r\n                                </Typography>\r\n\r\n                                <Typography>\r\n                                    {post.content}\r\n                                </Typography>\r\n\r\n                                {this.state.postComments}\r\n\r\n                                <TextField\r\n                                    name=\"comment\"\r\n                                    label={bundle.comment}\r\n                                    value={this.state.comment}\r\n                                    onChange={this.handleChange} />\r\n\r\n                                <Button onClick={this.handleComment} >\r\n                                    {bundle.postComment}\r\n                                </Button>\r\n\r\n                            </DialogContent>\r\n                        </Dialog>\r\n                    </div>\r\n                ):(\r\n                    <>\r\n                    </>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DisplayPost;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\n\r\nimport AddPost from \"./components/AddPost\";\r\nimport RegisterUser from \"./components/RegisterUser\";\r\nimport LogInUser from \"./components/LogInUser\";\r\nimport DisplayPost from \"./components/DisplayPost\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            siteLang: \"en\",\r\n            user: {},\r\n            posts: [],\r\n        };\r\n    }\r\n\r\n    // Fetches all the posts from the backend REST api\r\n    getPosts = async () => {\r\n        var res = await fetch(\"api/posts\");\r\n        if ( res.status === 200 ) {\r\n            var posts = await res.json();\r\n            console.log(posts);\r\n            if ( posts ) {\r\n                console.log(posts);\r\n                var allPosts = posts.map((post) => {\r\n                    console.log(post);\r\n                    return <DisplayPost post={post} loggedIn={this.loggedIn} getToken={this.getToken} />;\r\n                })\r\n                this.setState({\r\n                    posts: allPosts,\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            // TODO: no posts found\r\n        }\r\n    };\r\n\r\n    setToken = (token) => {\r\n        localStorage.setItem(\"idToken\", token);\r\n    };\r\n\r\n    getToken = () => {\r\n        return localStorage.getItem(\"idToken\");\r\n    };\r\n\r\n    removeToken = () => {\r\n        localStorage.removeItem(\"idToken\");\r\n    };\r\n\r\n    changeLang = () => {\r\n        switch ( this.state.siteLang ) {\r\n            case \"en\":\r\n                return this.setState({\r\n                    siteLang: \"fi\",\r\n                });\r\n\r\n            case \"fi\":\r\n                return this.setState({\r\n                    siteLang: \"en\",\r\n                });\r\n            default:\r\n                return this.setState({\r\n                    siteLang: \"en\",\r\n                })\r\n        }\r\n    };\r\n\r\n\r\n    loggedIn = () => {\r\n        return (!this.isTokenExpired());\r\n    };\r\n\r\n    // User logs in normally\r\n    handleLogin = (userInfo) => {\r\n        fetch(\"api/login\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                username: userInfo.username,\r\n                password: userInfo.password,\r\n            })\r\n        }).then((res) => {\r\n            if ( res.status === 200 ) {\r\n                res.json()\r\n                .then((res) => {\r\n                    console.log(res);\r\n                    this.setToken(res.token);\r\n\r\n                    // Reload the page\r\n                    this.setState({\r\n                        state: this.state\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    handleLogout = () => {\r\n        this.removeToken();\r\n\r\n        this.setState({\r\n            state: this.state\r\n        });\r\n    };\r\n\r\n    // User is registered and automatically logged in\r\n    // Handling the JWT token after user has registered\r\n    registeredUser = (response) => {\r\n        this.setToken(response.token);\r\n\r\n        this.props.history.replace(\"/\");\r\n    };\r\n\r\n    decodeToken = (token) => {\r\n        var base64Url = token.split('.')[1];\r\n        if ( base64Url ) {\r\n            var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n            var parsed = JSON.parse(atob(base64));\r\n            //console.log(parsed);\r\n            return parsed;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    // Check if the current token is expired\r\n    isTokenExpired = () => {\r\n        var token = this.getToken();\r\n        if ( token ) {\r\n            let decodedToken = this.decodeToken(token);\r\n\r\n            if ( decodedToken.exp < Date.now() / 1000 ) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.getPosts();\r\n        if ( this.loggedIn() ) {\r\n            let token = this.decodeToken(this.getToken());\r\n            let user = {};\r\n            user.username = token.username;\r\n            user.id = token.id;\r\n\r\n            this.setState({\r\n                user: user\r\n            });\r\n        }\r\n        else {\r\n            //this.props.history.replace(\"/\");\r\n        }\r\n    }\r\n\r\n    /* If user is logged in show logout and addpost, else show register and login\r\n\r\n\r\n       */\r\n    render() {\r\n\r\n        return (\r\n            <div >\r\n                { this.loggedIn() ? (\r\n                    <>\r\n                        <AddPost siteLang=\"en\" loggedIn={this.loggedIn} getToken={this.getToken} />\r\n                        <Button onClick={this.handleLogout}> logout </Button>\r\n                    </>\r\n                ):(\r\n                    <>\r\n                        <RegisterUser siteLang=\"en\" registeredUser={this.registeredUser} />\r\n                        <LogInUser siteLang=\"en\" handleLogin={this.handleLogin} />\r\n                    </>\r\n\r\n                )}\r\n\r\n                <div class=\"center\" >\r\n                    {this.state.posts}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}